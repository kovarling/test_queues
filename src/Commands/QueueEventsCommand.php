<?php
/**
 * ОПИСАНИЕ
 *
 * @link http://m1-call.ru/
 * @author Лютович Георгий <darkbober@gmail.com>
 * @copyright M1 Shop <m1-shop.ru>
 */

namespace App\Commands;


use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class QueueEventsCommand extends Command
{

    private $redisHost;
    private $redisPort;

    protected static $defaultName = 'test:queue_events';

    /**
     * @param $redisHost string
     * @param $redisPort string
     */
    public function __construct($redisHost, $redisPort)
    {
        parent::__construct();
        $this->redisHost = $redisHost;
        $this->redisPort = $redisPort;
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this
            ->addArgument('userGroups', InputArgument::REQUIRED, 'Список групп юзеров для обработки разделенных запятой (1,4,5)')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output){
        $redis = new \Redis();
        $redis->connect($this->redisHost, $this->redisPort);

        $groups = explode(',', $input->getArgument('userGroups'));
        foreach ($groups as $index=>$group){
            if(!in_array($group, [1,2,3,4,5,6,7,8,9,10])){ // при нормальной реализации я бы взял максиммальную группу из id последнего пользователя в бд
                unset($groups[$index]);
                $output->writeln($group.' не валидное значение');
                continue;
            }
            if($redis->exists('group_processing_'.$group)){
                unset($groups[$index]);
                $output->writeln($group.' уже обрабатывается');
                continue;
            }
            $redis->set('group_processing_'.$group, 1);
        }
        while (true){
            foreach ($groups as $group){
                if(!$redis->exists('group_processing_'.$group)){
                    $output->writeln('Очередь была сгенерирована заного. закрываюсь');
                    break 2;
                }
                $userWithEvents = $redis->rPop('group_'.$group);
                if($userWithEvents !== false){
                    $userWithEvents = explode(':', $userWithEvents);
                    $userId = $userWithEvents[0];
                    $events = json_decode($userWithEvents[1], true);
                    foreach ($events as $event){
                        $output->writeln('executing event - '. $event.' for user - '. $userId);
                        sleep(1);
                    }
                } else {
                    $output->writeln('group - '.$group.' is empty');
                }
            }
        }

        $redis->close();
        return Command::SUCCESS;

    }

}